@page "/Sku"

@using Biscoitinhos.application.DTO;
@inject IJSRuntime JSRuntime;
@inject Biscoitinhos.application.Interfaces.ISKUApp skuApp;


<h3>sku</h3>

<a href="/create" class="btn btn-sucess">Criar</a>

<table class="table table-responsive table-striped">
    <thead>
        <tr>
            <th>Id</th>
            <th>Nome</th>
            <th>Ações</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (listSkus != null && listSkus.Count() > 0)
        {
            foreach (var sku in listSkus)
            {
                <tr>
                    <td>@sku.Nome</td>
                    <td>
                        <a href="/update/@sku.Id" class="btn btn-primary">Editar</a>
                        <button class="btn btn-danger" onclick="Delete(@sku.Id)">Excluir</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    List<SKUDTO> listSkus = new();
    protected override async Task OnInitializedAsync()
    {
        listSkus = await PopularSkus();
    }

    private async Task<List<SKUDTO>> PopularSkus()
    {
        var lista = await skuApp.SelectAll();
        return lista.Select(s => new SKUDTO { }).ToList();
        // return await skuApp.SelectAll().Select(x => new SKUDTO
        // {
        //     Id = x.Id,
        //     Nome = x.Nome
        // }).ToList();
    }

    async Task Delete(int Id)
    {
        bool confirma = await JSRuntime.InvokeAsync<bool>("confirm", "Deseja excluir o sku?");
        if (!confirma)
            return;

        var sku = await skuApp.SelectById(Id);

        await skuApp.Delete(sku.Id);

        listSkus = await PopularSkus();

        StateHasChanged();
    }
}